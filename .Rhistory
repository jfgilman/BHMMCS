Au <- 1
} else {
if(R(x1, beta1, theta, kap = kappa) == 1){
A <- pi2(x1, theta)
Au <- 1
} else {
A <- pi1(x1, beta1)
Au <- 0
expertStatus[which(expertStatus == 0)[1]] <- delta
}
}
newy <- x0 * beta0 + A * x1 * beta1 + rnorm(1, 0, 3)
y <- append(y, newy)
Actions <- append(Actions, A)
Auto <- append(Auto, Au)
X0 <- append(X0, x0)
X1 <- append(X1, x1)
}
}
for(k in 1:length(expertStatus)){
if(expertStatus[k] > 0){
expertStatus[k] <- expertStatus[k] - 1
}
}
}
Results[[i]] <- cbind(y, X0, X1, Actions, Auto)
current <- do.call(rbind, Results)
mody <- current[,1]
modx0 <- current[,2]
modx1 <- current[,3]*current[,4]
theta <- lm(mody ~ 0 + modx0 + modx1)$coefficients[2]
Print("estimate:")
print(theta)
Print("Real")
print(beta1)
Print("...........")
if(i > 3){
percentAuto <- sum(c(Results[[i]][,5], Results[[i-1]][,5], Results[[i-2]][,5])) /
length(c(Results[[i]][,5], Results[[i-1]][,5], Results[[i-2]][,5]))
if(percentAuto > .9){
N <- N + 1
}
}
beta1 <- beta1 + rnorm(1,0,.1)
}
mean(current[which(current[,5] == 1),1])
mean(current[which(current[,5] == 0),1])
# rate for tasks from a single process
lambda <- .05
# Time length for each episode
m <- 100
# experts capacity for decisions in a given time
c <- 2
expertStatus <- c(rep(0,c))
# number of processes running
N <- 1
# total number of episodes that will be played
Eps <- 100
# amount of time for expert to complete a task
delta <- 5
# expert policy
pi1 <- function(x1, beta1){
if(x1*beta1 > 0){
return(1)
} else{
return(-1)
}
}
# estimated expert policy
pi2 <- function(x1, theta){
if(x1*theta > 0){
return(1)
} else{
return(-1)
}
}
# tunning param
kappa <- 1
# Routing function
R <- function(x1, beta1, theta, kap = 1){
p <- 1/(exp(kap*abs(x1*(beta1 - theta))))
return(rbinom(1,1,p))
}
# Truth
beta0 <- 2
beta1 <- 3
# Estimate
theta <- 1
Results <- list()
for(i in 1:Eps){
expertStatus <- c(rep(0,c))
y <- c()
X0 <- c()
X1 <- c()
Actions <- c()
Auto <- c()
# start of an episode
for(j in 1:m){
taskNum <- sum(rpois(N,lambda))
A <- NULL
Au <- NULL
if(taskNum > 0){
for(k in 1:taskNum){
x0 <- runif(1, -4, 4)
x1 <- runif(1, -2, 2)
if(all(expertStatus > 0)){
A <- pi2(x1, theta)
Au <- 1
} else {
if(R(x1, beta1, theta, kap = kappa) == 1){
A <- pi2(x1, theta)
Au <- 1
} else {
A <- pi1(x1, beta1)
Au <- 0
expertStatus[which(expertStatus == 0)[1]] <- delta
}
}
newy <- x0 * beta0 + A * x1 * beta1 + rnorm(1, 0, 3)
y <- append(y, newy)
Actions <- append(Actions, A)
Auto <- append(Auto, Au)
X0 <- append(X0, x0)
X1 <- append(X1, x1)
}
}
for(k in 1:length(expertStatus)){
if(expertStatus[k] > 0){
expertStatus[k] <- expertStatus[k] - 1
}
}
}
Results[[i]] <- cbind(y, X0, X1, Actions, Auto)
current <- do.call(rbind, Results)
mody <- current[,1]
modx0 <- current[,2]
modx1 <- current[,3]*current[,4]
theta <- lm(mody ~ 0 + modx0 + modx1)$coefficients[2]
print("estimate:")
print(theta)
print("Real")
print(beta1)
print("...........")
if(i > 3){
percentAuto <- sum(c(Results[[i]][,5], Results[[i-1]][,5], Results[[i-2]][,5])) /
length(c(Results[[i]][,5], Results[[i-1]][,5], Results[[i-2]][,5]))
if(percentAuto > .9){
N <- N + 1
}
}
beta1 <- beta1 + rnorm(1,0,.1)
}
mean(current[which(current[,5] == 1),1])
mean(current[which(current[,5] == 0),1])
tail(Results)
summary(Results)
mean(current[which(current[,5] == 1),1])
mean(current[which(current[,5] == 0),1])
f <- function(r){
sum(r[,1])
}
apply(Results, f)
lapply(Results, f)
plot(lapply(Results, f))
apply(Results,1,f)
apply(Results,2,f)
sapply(Results,f)
plot(sapply(Results,f))
f1 <- function(r){
sum(r[,1])
}
f2 <- function(r){
length(which(r[,5] == 0))
}
plot(sapply(Results, f1))
points(sapply(Results, f2))
f1 <- function(r){
sum(r[,1])
}
f2 <- function(r){
length(which(r[,5] == 0))
}
plot(sapply(Results, f1), col = 2)
points(sapply(Results, f2), col = 4)
plot(sapply(Results, f1), col = 2, ylab = "Profit/Work", "Episode")
points(sapply(Results, f2), col = 4)
legend(10, 600, c("Total Profit", "Number of Expert Decisions"), col = c(2,4), pch = 1)
plot(sapply(Results, f1), col = 2, ylab = "Profit/Work", "Episode")
points(sapply(Results, f2), col = 4)
legend(5, 600, c("Total Profit", "Number of Expert Decisions"), col = c(2,4), pch = 1)
plot(sapply(Results, f1), col = 2, ylab = "Profit/Work", "Episode")
points(sapply(Results, f2), col = 4)
legend(5, 600, c("Total Profit", "Number of Expert Decisions"), col = c(2,4), pch = 1)
plot(sapply(Results, f1), col = 2, ylab = "Profit/Work", xlab = "Episode")
points(sapply(Results, f2), col = 4)
legend(5, 600, c("Total Profit", "Number of Expert Decisions"), col = c(2,4), pch = 1)
plot(sapply(Results, f1), col = 2, ylab = "Profit / Work", xlab = "Episode")
points(sapply(Results, f2), col = 4)
legend(5, 600, c("Total Profit", "Number of Expert Decisions"), col = c(2,4), pch = 1)
# rate for tasks from a single process
lambda <- .05
# Time length for each episode
m <- 100
# experts capacity for decisions in a given time
c <- 2
expertStatus <- c(rep(0,c))
# number of processes running
N <- 1
# total number of episodes that will be played
Eps <- 100
# amount of time for expert to complete a task
delta <- 5
# expert policy
pi1 <- function(x1, beta1){
if(x1*beta1 > 0){
return(1)
} else{
return(-1)
}
}
# estimated expert policy
pi2 <- function(x1, theta){
if(x1*theta > 0){
return(1)
} else{
return(-1)
}
}
# tunning param
kappa <- 1
# Routing function
R <- function(x1, beta1, theta, kap = 1){
p <- 1/(exp(kap*abs(x1*(beta1 - theta))))
return(rbinom(1,1,p))
}
# Truth
beta0 <- 2
beta1 <- 3
# Estimate
theta <- 1
Results <- list()
for(i in 1:Eps){
expertStatus <- c(rep(0,c))
y <- c()
X0 <- c()
X1 <- c()
Actions <- c()
Auto <- c()
# start of an episode
for(j in 1:m){
taskNum <- sum(rpois(N,lambda))
A <- NULL
Au <- NULL
if(taskNum > 0){
for(k in 1:taskNum){
x0 <- runif(1, -4, 4)
x1 <- runif(1, -2, 2)
if(all(expertStatus > 0)){
A <- pi2(x1, theta)
Au <- 1
} else {
if(R(x1, beta1, theta, kap = kappa) == 1){
A <- pi2(x1, theta)
Au <- 1
} else {
A <- pi1(x1, beta1)
Au <- 0
expertStatus[which(expertStatus == 0)[1]] <- delta
}
}
newy <- x0 * beta0 + A * x1 * beta1 + rnorm(1, 0, 3)
y <- append(y, newy)
Actions <- append(Actions, A)
Auto <- append(Auto, Au)
X0 <- append(X0, x0)
X1 <- append(X1, x1)
}
}
for(k in 1:length(expertStatus)){
if(expertStatus[k] > 0){
expertStatus[k] <- expertStatus[k] - 1
}
}
}
Results[[i]] <- cbind(y, X0, X1, Actions, Auto)
current <- do.call(rbind, Results)
mody <- current[,1]
modx0 <- current[,2]
modx1 <- current[,3]*current[,4]
theta <- lm(mody ~ 0 + modx0 + modx1)$coefficients[2]
print("estimate:")
print(theta)
print("Real")
print(beta1)
print("...........")
if(i > 3){
percentAuto <- sum(c(Results[[i]][,5], Results[[i-1]][,5], Results[[i-2]][,5])) /
length(c(Results[[i]][,5], Results[[i-1]][,5], Results[[i-2]][,5]))
if(percentAuto > .9){
N <- N + 1
}
}
beta1 <- beta1 + rnorm(1,0,.05)
}
mean(current[which(current[,5] == 1),1])
mean(current[which(current[,5] == 0),1])
head(Results)
f1 <- function(r){
sum(r[,1])
}
f2 <- function(r){
length(which(r[,5] == 0))
}
plot(sapply(Results, f1), col = 2, ylab = "Profit / Work", xlab = "Episode")
points(sapply(Results, f2), col = 4)
legend(5, 600, c("Total Profit", "Number of Expert Decisions"), col = c(2,4), pch = 1)
plot(sapply(Results, f1), col = 2, ylab = "Profit / Work", xlab = "Episode")
points(sapply(Results, f2), col = 4)
legend(5, 1200, c("Total Profit", "Number of Expert Decisions"), col = c(2,4), pch = 1)
mean(current[which(current[,5] == 1),1])
mean(current[which(current[,5] == 0),1])
install.packages("neuralnet")
?neuralnet
library(neuralnet)
?neuralnet
neuralnet()
neuralnet
?boston
varify.variables
a <- c(1,2,3,5)
b <- c(2,2,2,2)
sum(a<b)
sum(a>b)
y <- rgamma(1000,1,1)
?rgamma
alphaHat <- mean(y)/var(y)
alphaHat
aHat <- c()
for(i in 1:1000){
y <- rgamma(20,1,1)
aHat[i] <- mean(y)/var(y)
}
var(aHat)
aHat <- c()
n <- 20
for(i in 1:1000){
y <- rgamma(n,1,1)
aHat[i] <- mean(y)/var(y)
}
var(aHat)*n
aHat <- c()
n <- 20
for(i in 1:1000){
y <- rgamma(n,1,1)
aHat[i] <- mean(y)/var(y)
}
var(aHat)*n
aHat <- c()
n <- 20
for(i in 1:1000){
y <- rgamma(n,1,1)
aHat[i] <- mean(y)/var(y)
}
var(aHat)*n
aHat <- c()
n <- 20
for(i in 1:1000){
y <- rgamma(n,1,1)
aHat[i] <- mean(y)/var(y)
}
var(aHat)*n
aHat <- c()
n <- 20
for(i in 1:1000){
y <- rgamma(n,1,1)
aHat[i] <- mean(y)/var(y)
}
var(aHat)*n
aHat <- c()
n <- 20
for(i in 1:10000){
y <- rgamma(n,1,1)
aHat[i] <- mean(y)/var(y)
}
var(aHat)*n
aHat <- c()
n <- 20
for(i in 1:10000){
y <- rgamma(n,1,1)
aHat[i] <- mean(y)/var(y)
}
var(aHat)*n
aHat <- c()
n <- 20
for(i in 1:10000){
y <- rgamma(n,1,1)
aHat[i] <- mean(y)/var(y)
}
var(aHat)*n
aHat <- c()
n <- 20
for(i in 1:10000){
y <- rgamma(n,1,1)
aHat[i] <- mean(y)/var(y)
}
var(aHat)*n
aHat <- c()
n <- 20
for(i in 1:1000000){
y <- rgamma(n,1,1)
aHat[i] <- mean(y)/var(y)
}
aHat <- c()
n <- 20
for(i in 1:100000){
y <- rgamma(n,1,1)
aHat[i] <- mean(y)/var(y)
}
var(aHat)*n
aHat <- c()
n <- 20
for(i in 1:100000){
y <- rgamma(n,1,1)
aHat[i] <- mean(y)/var(y)
}
var(aHat)*n
aHat <- c()
n <- 20
for(i in 1:100000){
y <- rgamma(n,1,1)
aHat[i] <- mean(y)/var(y)
}
var(aHat)*n
aHat <- c()
n <- 40
for(i in 1:100000){
y <- rgamma(n,1,1)
aHat[i] <- mean(y)/var(y)
}
var(aHat)*n
aHat <- c()
n <- 40
for(i in 1:100000){
y <- rgamma(n,1,1)
aHat[i] <- mean(y)/var(y)
}
var(aHat)*n
(.2)^(-1/.4)*gamma(1.4/.4)
(.5)^(-1/.4)*gamma(1.4/.4)
((.5)^(-1/.4)*gamma(1.4/.4) + (.2)^(-1/.4)*gamma(1.4/.4))/2
((.5)^(-1/.4)*gamma(1.4/.4) + (.2)^(-1/.4)*gamma(1.4/.4))*13
((.5)^(-1/.4)*gamma(1.4/.4) + (.2)^(-1/.4)*gamma(1.4/.4))/2
(((.5)^(-1/.4)*gamma(1.4/.4) + (.2)^(-1/.4)*gamma(1.4/.4))/2)/26
(((.5)^(-1/.4)*gamma(1.4/.4) + (.02)^(-1/.4)*gamma(1.4/.4))/2)/26
(((.5)^(-1/.4)*gamma(1.4/.4) + (.5)^(-1/.4)*gamma(1.4/.4))/2)/26
d <- c(3,5,5,2,2,6,4,5,2,3,5,4,4)
mean(d)
hist(rgamma(1000,3,3))
mean(rgamma(1000,3,3))
install.packages("profvis")
a = 1
b = 1
s = 0
n = 30
etaDen -> function(a, b, s, n eta){
return((exp(eta) + 1)^(-a - s - 1) * (1 - (1/(exp(eta) + 1))^(n - s + b - 1) * exp(eta) * gamma(a + b + n) / (gamma(a + s) * gamma(b + n - s))
}
plot(etaDen(a,b,s,n,seq(.01, .99, by = .01)))
a = 1
b = 1
s = 0
n = 30
etaDen -> function(a, b, s, n, eta){
return((exp(eta) + 1)^(-a - s - 1) * (1 - (1/(exp(eta) + 1))^(n - s + b - 1) * exp(eta) * gamma(a + b + n) / (gamma(a + s) * gamma(b + n - s))
}
plot(etaDen(a,b,s,n,seq(.01, .99, by = .01)))
a = 1
b = 1
s = 0
n = 30
etaDen -> function(a, b, s, n, eta){
return((exp(eta) + 1)^(-a - s - 1) * (1 - (1/(exp(eta) + 1)))^(n - s + b - 1) * exp(eta) * gamma(a + b + n) / (gamma(a + s) * gamma(b + n - s)))
}
plot(etaDen(a,b,s,n,seq(.01, .99, by = .01)))
etaDen <- function(a, b, s, n, eta){
return((exp(eta) + 1)^(-a - s - 1) * (1 - (1/(exp(eta) + 1)))^(n - s + b - 1) * exp(eta) * gamma(a + b + n) / (gamma(a + s) * gamma(b + n - s)))
}
plot(etaDen(a,b,s,n,seq(.01, .99, by = .01)))
plot(etaDen(a,b,s,n,seq(-5, 5, by = .1)))
etas <- seq(-1, 10, by = .1)
plot(etas, etaDen(a,b,s,n,etas))
s = 30
plot(etas, etaDen(a,b,s,n,etas))
etas <- seq(-5, 10, by = .1)
plot(etas, etaDen(a,b,s,n,etas))
s = 30
plot(etas, etaDen(a,b,s,n,etas))
etas <- seq(-10, 10, by = .1)
plot(etas, etaDen(a,b,s,n,etas))
s = 30
plot(etas, etaDen(a,b,s,n,etas))
etas <- seq(-10, 10, by = .05)
plot(etas, etaDen(a,b,s,n,etas))
etas <- seq(-10, 10, by = .05)
s = 0
plot(etas, etaDen(a,b,s,n,etas))
etas <- seq(-10, 10, by = .05)
s = 0
plot(etas, etaDen(a,b,s,n,etas), ylab = "Density", main = "Posterior Density S = 0")
s = 30
plot(etas, etaDen(a,b,s,n,etas), ylab = "Density", main = "Posterior Density S = 30")
setwd("~/BHMMCS")
